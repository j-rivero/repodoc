#!/bin/bash

# Repodoc Tool written by Jos√© Luis Rivero (yoswink@gentoo.org)
# Version 0.1_alpha
#
# Repodoc try to make Gentoo Documentation Proyect Developer's
# work easier (yeah! we are slackers).
# Thanks a lot to Fernando J. Pereda (ferdy@gentoo.org) who
# is my bash-ninja-sensei.
#
# Distributed under the terms of the GNU General Public License v2


# -------------------- SEARCH DIR_ROOT ----------------------------
search_dir_root () {
	DIR_PROJ_TMP=${DIR##*/proj/*}

	[[ -z ${DIR_PROJ_TMP} ]] && DIR_ROOT="proj" || DIR_ROOT="doc"
}

# ----------------- SEARCH LANGUAGE --------------------------------
search_language () {
	# First, check if it's under /doc/ or under /proj/ using WWW_DIR
	[[ ${DIR_ROOT} = "proj" ]] &&  TMP1=${DIR##*/proj/} || TMP1=${DIR##*/doc/}

	# Next "/item/" after /proj/ or /doc/ should be the language
	LANGUAGE=${TMP1%/*}

	# Set translation variable
	[[ ${LANGUAGE} = "en" ]] && TRANSLATION="no" || TRANSLATION="yes"
}

# ----------------- SEARCH ORIGINAL_DOC ---------------------------

# Search for path of original version only in case of doc is a translation
search_original_doc (){
	if [[ ${DIR_ROOT} = "doc" ]]; then
		# Doc is under /doc/
		ORIGINAL_DOC=$(sed -e "s:doc/${LANGUAGE}:doc/en:g" <<< ${DOC})
	else
		# Doc is under /proj/
		ORIGINAL_DOC=$(sed -e "s:proj/${LANGUAGE}:proj/en:g" <<< ${DOC})
	fi
}


# ----------------- SEARCH WWW_DIR --------------------------------
search_www_dir () {
	if [[ ${DIR_ROOT} = "proj" ]]; then
		WWW_DIR=${DIR/*proj/\/proj}
	else
		WWW_DIR=${DIR/*doc/\/doc}
	fi
}


# ----------------- CREATE ENVIRONMENT -----------------------------
# Create REPO_DIR and REPO_TMP_DIR if needed and clean log

create_environment () {
	# Create dirs. -p will create REPO_DIR if needed.
	[[ -d ${REPO_TMP_DIR} ]] || mkdir -p "${REPO_TMP_DIR}"

	# Remove old log
	[[ -f ${REPODOC_LOG} ]] && rm ${REPODOC_LOG}
}


#  ---------------- SEARCH DOCTYPE -----------------------------
search_doctype () {
	TMP_DOC_TYPE=$(grep -m 1 DOCTYPE ${DOC})
	TMP_DOC_TYPE2=${TMP_DOC_TYPE##<!DOCTYPE }
	DOC_TYPE=${TMP_DOC_TYPE2%% SYSTEM*}
}

#  ---------------- GENERATE OUTPUT ----------------------------
generate_output () {
	# Screen output 
	echo "[ ${OUTPUT_RESULT} ]"

	# Log message

	# Module header
	cat <<- EOF >> ${REPODOC_LOG}
	------- Module ${MOD} -------
	Result: ${OUTPUT_RESULT}

	EOF

	# Checking if output is not empty
	if [[ -n ${OUTPUT_TEXT} ]]; then
		# Checking if output is a command
		if [[ -z ${OUTPUT_TEXT##*::*} ]]; then
			# Executing the command
			# need to use eval since otherwise
			# parameters doesn't work as expected
			eval ${OUTPUT_TEXT##*::}
		else
			# Output is just plain text
			cat <<- EOF >> ${REPODOC_LOG}
			Reason:
			${OUTPUT_TEXT}
			EOF
		fi
	fi
}


#  ---------------- SHOW LOG  ----------------------------
show_log() {
	# Set up the log viewer app
	LOG_VIEWER="less ${REPODOC_LOG}"

	echo
	echo -n "Do you want to see the error log? [y/n] "
	read TMP_OPT
	[[ ${TMP_OPT} = "y" ]] && ${LOG_VIEWER}
}



# -- VARIABLES --
# PATH DIRS

# Knowing Script dir beware of symlink 
[[ -L ${0} ]] && TMP_SCRIPT_DIR=$(readlink ${0}) || TMP_SCRIPT_DIR=${0}
SCRIPT_DIR="${TMP_SCRIPT_DIR%/*}"

MOD_DIR="${SCRIPT_DIR}/modules"
EXTRA_DIR="${SCRIPT_DIR}/extras"
MOD_COMM="${MOD_DIR}/commons"
MOD_TRANS="${MOD_DIR}/trans"
MOD_HAND="${MOD_DIR}/handbook"
REPO_DIR="${HOME}/.repodoc"
REPO_TMP_DIR="${REPO_DIR}/tmp"
REPODOC_LOG="${REPO_DIR}/repodoc.log"

SCRIPT_LEVEL="BASIC"

PARAM1=$1
DIR_FILTER=${PARAM1%/*}


# Getting the doc_name and dir taking care of
# param as a dir (absolute or relative path) 
# or as file.

PARAM1=$1

if [[ -f ${PARAM1##*/} ]]; then
	DOC_NAME=${PARAM1##*/}
	DIR=${PWD}
else
	# Param is a dir
	DOC_NAME=${PARAM1##*/}
	DIR=${PARAM1%/*}
	DIR=${DIR#${PWD}/}
	DIR=${PWD}/${DIR}
fi

DOC=${DIR}/${DOC_NAME}

# Starting environment and variables
create_environment
search_dir_root
search_language
search_original_doc
search_www_dir
search_doctype



echo " ---------- Info ------------------------------"
echo "Doc: " ${DOC_NAME}
echo "Dir: " ${DIR}
echo "Lang: " ${LANGUAGE}
echo "Trans: " ${TRANSLATION}
echo "Doc-type: " ${DOC_TYPE}
#echo "www-dir: " $WWW_DIR
#echo "original_doc: " $ORIGINAL_DOC
#echo "Level: " $SCRIPT_LEVEL
echo " ----------------------------------------------"
echo

# Set up VIEW_LOG to "no" until an error appears
VIEW_LOG="no"

# Handling modules
for MOD in ${MOD_DIR}/* ; do
		
		# Initializing variables
		TRANSLATION_MODULE=""
		OUTPUT_RESULT=""
		OUTPUT_TEXT=""
		LEVEL=""

		# Read the module
		source "${MOD}"

		# Checking module level
		#if [ "${SCRIPT_LEVEL}" = "${LEVEL}" ]
		#then
			if [[ ${TRANSLATION_MODULE} != "yes" ]] \
				|| [[ ${TRANSLATION} = "yes" ]]; then
				# Checking module's keywords
				for TMP_DOC_TYPE in ${KEYWORDS}; do
					# Checking "-KEYWORD" to jump the module
					if [[ ${TMP_DOC_TYPE} != "-${DOC_TYPE}" ]]; then
						# Checking keyword 
						if [[ ${TMP_DOC_TYPE} = ${DOC_TYPE} ]] \
							|| [[ ${TMP_DOC_TYPE} = "ALL" ]]; then
								echo -n " * Processing module " ${MOD##*\/} " ...  "
							# Call exec_module (function from module)
							exec_module
							# Generating output for the log
							generate_output
							# Checking if there was any error
							[[ ${OUTPUT_RESULT} != "ok" ]] && VIEW_LOG="yes"
						fi
					else
						# If found "-keyword", exit the loop
						break
					fi
				done
			fi
		#fi end of LEVEL
	#fi
done

# Show the log if needed
[[ ${VIEW_LOG} = "yes" ]] && show_log
