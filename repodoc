#!/bin/bash
# Distributed under the terms of the GNU General Public License v2
# Copyright 2005-2006 The RepoDoc Team

VERSION="0.1_beta3"

# -----
# SHOW_VERSION_USAGE Function. Private
# Show quick help about how to run repodoc
show_version_usage() {
	cat << EOH
The RepoDoc Tool version ${VERSION}
Distributed under the terms of the GPLv2
Copyright 2005-2006 The RepoDoc Team

Usage: repodoc [OPTIONS] DOCUMENTS

	-h, --help		display this help and exit
	-v, --version		output version information and exit
	-o, --output [F]	use [F] frontend
	-r, --raw		not use any frontend
EOH
}

# ------
# CREATE ENVIRONMENT Function. Private
# Create REPO_DIR and REPO_TMP_DIR if needed and clean log
create_environment() {
	# Create dirs. -p will create REPO_DIR if needed.
	[[ -d ${REPO_TMP_DIR} ]] || mkdir -p "${REPO_TMP_DIR}"
}

# ------
# CHECK DOC Function. Private
#
check() {
	local DOC_SUM DOC_NAME DIR DOC DOMAIN LANGUAGE TRANSLATION \
		WWW_DIR CVS_ROOT DOC_TYPE ORIGINAL_DOC MOD \
		needtest execmodule tmp_mod

	# Adjusting the main variables
	DOC_SUM=$(boundary ${1})
	DOC_NAME=${1##*/}
	DIR=$(build-full-path ${1})
	DOC=${DIR}/${DOC_NAME}

	# Starting environment and variables
	create_environment
	DOMAIN=$(extract-doc-domain ${DOC})
	LANGUAGE=$(extract-doc-language ${DIR})
	WWW_DIR=$(extract-web-dir ${DIR})
	CVS_ROOT=$(extract-cvs-root ${DIR})
	DOC_TYPE=$(get-xmldoctype ${DOC})
	ORIGINAL_DOC=$(localize-path ${DOC} "en")
	[[ "${LANGUAGE}" == "en" ]] && TRANSLATION=false || TRANSLATION=true

	echo ${DOC_SUM}
	echo "DOC_NAME ${DOC_NAME}"
	echo "DIR ${DIR}"
	echo "LANGUAGE ${LANGUAGE}"
	echo -n "TRANSLATION $(${TRANSLATION} && echo "true" || echo "false")"
	#[[ -f ${ORIGINAL_DOC} ]] || echo -n " (OBSOLETE DOCUMENT)"
	echo
	echo "DOC_TYPE ${DOC_TYPE}"
	#echo "WWW_DIR ${WWW_DIR}"
	#echo "DOMAIN ${DOMAIN}"
	#echo "CVS_ROOT ${CVS_ROOT}"

	#echo "ORIGINAL_DOC ${ORIGINAL_DOC}"
	#echo "LEVEL ${SCRIPT_LEVEL}"

	# Handling modules
	for MOD in ${MOD_DIR}/* ; do
		# This vars are set by the modules. This is a pedantic thing
		#  meant to help me keeping my sanity.
		# TODO: Remove this once we figure out how to cleanly do the
		#  whole module processing in a subshell.
		unset OUTPUT_TEXT LEVEL MODULE_NAME KEYWORDS exec_module ${!NEED_*} n needtest

		MODULE_NAME=${MOD#${MOD_DIR}/}
		MODULE_NAME=${MODULE_NAME%.module}
		[[ -z ${REPO_SKIP_MODULES//* ${MODULE_NAME} *} ]] && continue

		# Read the module
		source "${MOD}"

		for n in ${!NEED_*} ; do
			needtest=$(eval echo $\{${n##NEED_}\})
			${needtest} || continue 2
		done

		# Parse KEYWORDS properly
		GLOBIGNORE=*
		execmodule=false

		for k in ${KEYWORDS} ; do
			case ${k} in
				'ALL'|'*'|"${DOC_TYPE}")    execmodule=true  ;;
				'-ALL'|'-*'|"-${DOC_TYPE}") execmodule=false ;;
			esac
		done

		# Restore GLOBIGNORE to avoid difficult to debug problems.
		unset GLOBIGNORE

		tmpmod=${MOD##*/}

		if ${execmodule} ; then
			echo ${DOC_SUM}
			echo ${tmpmod%.module}
			# Call exec_module (function from module). generate_output is
			# a bit special since it propagates its argument as its exit status.
			exec_module
			echo ${?}
			[[ ! -z ${OUTPUT_TEXT} ]] && echo "${OUTPUT_TEXT}"
			unset OUTPUT_TEXT
		fi

	done
}

# -----
# CHECK LIST OF DOCS Function.
#
check_all() {
	local DOCS_SUM

	DOCS_SUM=$(boundary "all ${*}")

	## Check every argument
	while [[ -n ${1} ]] ; do
		echo ${DOCS_SUM}
		check ${1}
		shift
	done
}

#
# MAIN CODE
# Program starts here
#

# Knowing Script dir beware of symlink
[[ -L ${0} ]] && SCRIPT_DIR=$(readlink ${0}) || SCRIPT_DIR=${0}
SCRIPT_DIR="${SCRIPT_DIR%/*}"

# Paths
MOD_DIR="${SCRIPT_DIR}/modules/repodoc"
EXTRA_DIR="${SCRIPT_DIR}/extras"
LIB_DIR="${SCRIPT_DIR}/lib"
MOD_COMM="${MOD_DIR}/commons"
MOD_TRANS="${MOD_DIR}/trans"
MOD_HAND="${MOD_DIR}/handbook"
REPO_DIR="${REPODOC_HOME:-${HOME}}/.repodoc"
REPO_TMP_DIR="${REPO_DIR}/tmp"
REPO_CONF_DIR="${REPO_DIR}/config"
FRONTEND_DIR="${SCRIPT_DIR}/frontend"
REPO_SKIP_MODULES=" ${REPODOC_SKIP_MODULES} "

# Options by default
REPO_OUT="${FRONTEND_DIR}/default"

# Importing libs
source "${LIB_DIR}/libcore.sh"
needlib xpath.sh xml.sh docpath.sh boundary.sh

# If no args, show usage
[[ $# -eq 0 ]] && { show_version_usage; exit 0; }

# Check version/help and specific options request
# and generate DOC_LIST
unset DOC_LIST
while [[ -n ${1} ]] ; do
	case $1 in
		-v|--version)
			echo "RepoDoc ${VERSION}"
			exit 0
		;;
		-h|--help)
			show_version_usage
			exit 0
		;;
		-o|--output)
			REPO_OUT="${FRONTEND_DIR}/${2}"
			shift
		;;
		-r|--raw)
			REPO_OUT="none"
		;;
		*)
			if [[ -f ${1} ]] ; then
				DOC_LIST="${DOC_LIST} ${1}"
			else
				echo >&2 "(EE) ${1} does not exist"
				exit 1
			fi
		;;
	esac
	shift
done

if [[ ${REPO_OUT} != "none" ]]; then
	if ! [[ -x ${REPO_OUT} ]]; then
		echo >&2 "(EE) '${REPO_OUT##*/}' frontend does not exist"
		echo >&2 "Select one of this list:"
		for i in "${FRONTEND_DIR}"/* ; do
			[[ -x "${i}" ]] && echo >&2 " - ${i##*/}"
		done
		exit 1
	fi
	( check_all ${DOC_LIST} | ${REPO_OUT} )
else
	check_all ${DOC_LIST}
fi

