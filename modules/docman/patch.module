#!/bin/bash

MOD_DESCRIPTION="Patch documents from a file or a bug number"
MOD_NAME="patch"

needlib docpath.sh xpath.sh xml.sh

BUGS_XML_URL="http://bugs.gentoo.org/show_bug.cgi?ctype=xml&id="
ATTACH_URL="http://bugs.gentoo.org/attachment.cgi?id="
REPO_TMP_DIR="${HOME}/.repodoc/tmp"
TMP_BUG="${REPO_TMP_DIR}/bug.xml"
TMP_PATCH="repodoc-tmp-patch.diff"

# Show module help
mod_help() {
	cat << EOH
${MOD_DESCRIPTION}

Usage: docman patch [--bug <number> | <file>]

EOH
}

patch_from_file() {
	local patch=${1}

	# Special check to know if there are any problems while patching
	# without touching or creating any file. -s == --quiet option.
	if [[ -z $(patch -s --dry-run < "${patch}") ]] ; then
		patch -s < ${patch}
		echo " - Patch seems to be sane. Done!"
	else
		echo "(EE) Patch seems to have some problems. Please check."
	fi
}

download_bug(){
	local bug_number=${1} output=${2}

	wget "${BUGS_XML_URL}${bug_number}" -O "${TMP_BUG}" > /dev/null 2>/dev/null
}

show_bug_info(){
	local bug_numer=${1} src=${TMP_BUG}

	desc=$(doxpath "${src}" "/bugzilla/bug/short_desc/text()")
	reporter=$(doxpath "${src}" "/bugzilla/bug/reporter/text()")
	patches=$(doxpath "${src}" "/bugzilla/bug/attachment/attachid/text()")

	# Show general info
	echo " Bug      : ${bug_numer}" 
	echo " Title    : ${desc}"
	echo " Reporter : ${reporter}"
	echo " Patches  :"
	
	# Processing patches
	patches_number=0
	for patch in ${patches} ; do
		patches_number=$(( ${patches_number} + 1 ))
		patch_desc=$(doxpath "${src}" \
		"//child::attachment[position()=${patches_number}]/desc/text()")
		echo "  - [${patches_number}] ${patch_desc}"
	done
	
	# Selecting the patch to be applied
	echo
	if ((${patches_number} > 1)) ; then
		# Several patches
		echo -n " Patch number: "
	else
		# Just one patch
		echo -n "Do you want to apply the patch? [y/n]: "
	fi
}

download_patch() {
	local  patch_number=${1} src=${TMP_BUG}

	# Extracting patch id
	patch_id=$(doxpath "${src}" \
		"//child::attachment[position()=${patch_number}]/attachid/text()")
	wget "${ATTACH_URL}${patch_id}" -O "${TMP_PATCH}" > /dev/null 2> /dev/null
}

exec_module() {
	# Checking params
	case ${1} in
		-b|--bug)
			# TODO suport multiple bugs in one call
			bug_number=${2}
			
			# Processing bug
			# 1. download the bug
			download_bug "${bug_number}"
			# 2. show bug info
			show_bug_info "${bug_number}"
			# 3. read the selected patch
			# TODO: support the selecting of more than one patch
			read opt
			[[ ${opt} == "y" ]] || [[ ${opt} == "Y" ]] && opt=1
			# 4. dowload the patch
			download_patch "${opt}"
			# 5. apply the patch
			patch_from_file "${TMP_PATCH}"
			# 6. clean the patch
			# rm "${TMP_PATCH}"
		;;

		-*) # param not supported
			echo "(EE) Param ${1} not supported."
			exit -1
		;;

		*) # patch from doc-name
			# Accepting doc_name or doc_name.xml
			file_name="${1//.xml}"
			# file exists?
			if [[ ! -f "${file_name}.xml" ]]; then
				echo "(EE) Doc ${file_name}.xml doesn't exist."
				exit -1
			fi

			# Search for candidates to be a patch when a doc n
			# name is given (ej: faq then search:
			# 1. faq.patch
			# 2. faq.diff

			[[ -f "${file_name}.patch" ]] &&
				patch_file="${file_name}.patch"
			[[ -f "${file_name}.diff" ]] &&
				patch_file="${file_name}.diff"

			# Apply the patch
			echo " - Patch found: ${patch_file}"
			patch_from_file "${patch_file}"
		esac
}
